<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="HopperBin" referent="RBX0">
		<Properties>
			<bool name="Active">false</bool>
			<token name="BinType">0</token>
			<string name="Name">Reset</string>
			<Content name="TextureId"><null></null></Content>
			<bool name="archivable">true</bool>
		</Properties>
		<Item class="Script" referent="RBX1">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<string name="Source">bin = script.Parent
resetted = false

function dis(part)
	while (part.Transparency &lt; 1) do
		part.Transparency = part.Transparency+0.1
		wait()
	end
	part:remove()
end
function ref(part)
	while (part.Reflectance &lt; 1) do
		part.Reflectance = part.Reflectance+0.1
		wait()
	end
	part:remove()
end
function onButton1Down(mouse)
	resetted = true
	local player = game.Players.LocalPlayer
	local char = player.Character
	if (char ~= nil) then
		local p = char:GetChildren()
		for i=1,#p do
			if (p[i].className == &quot;Part&quot;) then
				local cA = coroutine.create(function() dis(p[i]) end)
				local cB = coroutine.create(function() ref(p[i]) end)
				coroutine.resume(cA)
				coroutine.resume(cB)
			end
		end
	end
end

function onSelected(mouse)
        print(&quot;Reset Selected&quot;);
	if (resetted == true) then return end
	mouse.Button1Down:connect(onButton1Down)
end

bin.Selected:connect(onSelected)</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
	</Item>
</roblox>